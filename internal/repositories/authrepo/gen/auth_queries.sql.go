// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth_queries.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, kyc_status, email, phone_number, user_type, status, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID          uuid.UUID      `json:"id"`
	Username    string         `json:"username"`
	KycStatus   sql.NullString `json:"kyc_status"`
	Email       sql.NullString `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	UserType    sql.NullString `json:"user_type"`
	Status      sql.NullString `json:"status"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.KycStatus,
		&i.Email,
		&i.PhoneNumber,
		&i.UserType,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSessionByToken = `-- name: GetUserSessionByToken :one
SELECT id, user_id, token, expires_at, ip_address, user_agent, refresh_token, refresh_token_expires_at, created_at
FROM user_sessions
WHERE token = $1
`

type GetUserSessionByTokenRow struct {
	ID                    uuid.UUID      `json:"id"`
	UserID                uuid.NullUUID  `json:"user_id"`
	Token                 string         `json:"token"`
	ExpiresAt             time.Time      `json:"expires_at"`
	IpAddress             pqtype.Inet    `json:"ip_address"`
	UserAgent             sql.NullString `json:"user_agent"`
	RefreshToken          sql.NullString `json:"refresh_token"`
	RefreshTokenExpiresAt sql.NullTime   `json:"refresh_token_expires_at"`
	CreatedAt             sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetUserSessionByToken(ctx context.Context, token string) (GetUserSessionByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserSessionByToken, token)
	var i GetUserSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const saveUserSession = `-- name: SaveUserSession :exec
INSERT INTO user_sessions (
    id, user_id, token, expires_at, ip_address, user_agent, refresh_token, refresh_token_expires_at, created_at
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type SaveUserSessionParams struct {
	ID                    uuid.UUID      `json:"id"`
	UserID                uuid.NullUUID  `json:"user_id"`
	Token                 string         `json:"token"`
	ExpiresAt             time.Time      `json:"expires_at"`
	IpAddress             pqtype.Inet    `json:"ip_address"`
	UserAgent             sql.NullString `json:"user_agent"`
	RefreshToken          sql.NullString `json:"refresh_token"`
	RefreshTokenExpiresAt sql.NullTime   `json:"refresh_token_expires_at"`
	CreatedAt             sql.NullTime   `json:"created_at"`
}

func (q *Queries) SaveUserSession(ctx context.Context, arg SaveUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, saveUserSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
		arg.RefreshToken,
		arg.RefreshTokenExpiresAt,
		arg.CreatedAt,
	)
	return err
}
