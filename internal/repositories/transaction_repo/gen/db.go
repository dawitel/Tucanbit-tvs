// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package transactionRepo

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTransactionStmt, err = db.PrepareContext(ctx, CreateTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.deleteTransactionStmt, err = db.PrepareContext(ctx, DeleteTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransaction: %w", err)
	}
	if q.getPendingTransactionsStmt, err = db.PrepareContext(ctx, GetPendingTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetPendingTransactions: %w", err)
	}
	if q.getTransactionByHashStmt, err = db.PrepareContext(ctx, GetTransactionByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByHash: %w", err)
	}
	if q.getTransactionByIDStmt, err = db.PrepareContext(ctx, GetTransactionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByID: %w", err)
	}
	if q.getTransactionStatsStmt, err = db.PrepareContext(ctx, GetTransactionStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionStats: %w", err)
	}
	if q.getTransactionsByAddressStmt, err = db.PrepareContext(ctx, GetTransactionsByAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsByAddress: %w", err)
	}
	if q.getTransactionsByStatusStmt, err = db.PrepareContext(ctx, GetTransactionsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsByStatus: %w", err)
	}
	if q.updateTransactionStmt, err = db.PrepareContext(ctx, UpdateTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransaction: %w", err)
	}
	if q.updateTransactionStatusStmt, err = db.PrepareContext(ctx, UpdateTransactionStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransactionStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.deleteTransactionStmt != nil {
		if cerr := q.deleteTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransactionStmt: %w", cerr)
		}
	}
	if q.getPendingTransactionsStmt != nil {
		if cerr := q.getPendingTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPendingTransactionsStmt: %w", cerr)
		}
	}
	if q.getTransactionByHashStmt != nil {
		if cerr := q.getTransactionByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByHashStmt: %w", cerr)
		}
	}
	if q.getTransactionByIDStmt != nil {
		if cerr := q.getTransactionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByIDStmt: %w", cerr)
		}
	}
	if q.getTransactionStatsStmt != nil {
		if cerr := q.getTransactionStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStatsStmt: %w", cerr)
		}
	}
	if q.getTransactionsByAddressStmt != nil {
		if cerr := q.getTransactionsByAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsByAddressStmt: %w", cerr)
		}
	}
	if q.getTransactionsByStatusStmt != nil {
		if cerr := q.getTransactionsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsByStatusStmt: %w", cerr)
		}
	}
	if q.updateTransactionStmt != nil {
		if cerr := q.updateTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStmt: %w", cerr)
		}
	}
	if q.updateTransactionStatusStmt != nil {
		if cerr := q.updateTransactionStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createTransactionStmt        *sql.Stmt
	deleteTransactionStmt        *sql.Stmt
	getPendingTransactionsStmt   *sql.Stmt
	getTransactionByHashStmt     *sql.Stmt
	getTransactionByIDStmt       *sql.Stmt
	getTransactionStatsStmt      *sql.Stmt
	getTransactionsByAddressStmt *sql.Stmt
	getTransactionsByStatusStmt  *sql.Stmt
	updateTransactionStmt        *sql.Stmt
	updateTransactionStatusStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createTransactionStmt:        q.createTransactionStmt,
		deleteTransactionStmt:        q.deleteTransactionStmt,
		getPendingTransactionsStmt:   q.getPendingTransactionsStmt,
		getTransactionByHashStmt:     q.getTransactionByHashStmt,
		getTransactionByIDStmt:       q.getTransactionByIDStmt,
		getTransactionStatsStmt:      q.getTransactionStatsStmt,
		getTransactionsByAddressStmt: q.getTransactionsByAddressStmt,
		getTransactionsByStatusStmt:  q.getTransactionsByStatusStmt,
		updateTransactionStmt:        q.updateTransactionStmt,
		updateTransactionStatusStmt:  q.updateTransactionStatusStmt,
	}
}
