// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tx.sql

package transactionRepo

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const CreateTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (
    id, chain_id, chain_type, tx_hash, from_address, to_address,
    amount, fee, block_number, block_hash, status, confirmations,
    timestamp, verified_at, processor_id, metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
)
`

type CreateTransactionParams struct {
	ID            uuid.UUID             `json:"id"`
	ChainID       string                `json:"chain_id"`
	ChainType     string                `json:"chain_type"`
	TxHash        string                `json:"tx_hash"`
	FromAddress   string                `json:"from_address"`
	ToAddress     string                `json:"to_address"`
	Amount        string                `json:"amount"`
	Fee           sql.NullString        `json:"fee"`
	BlockNumber   sql.NullInt64         `json:"block_number"`
	BlockHash     sql.NullString        `json:"block_hash"`
	Status        string                `json:"status"`
	Confirmations int32                 `json:"confirmations"`
	Timestamp     time.Time             `json:"timestamp"`
	VerifiedAt    sql.NullTime          `json:"verified_at"`
	ProcessorID   sql.NullString        `json:"processor_id"`
	Metadata      pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.exec(ctx, q.createTransactionStmt, CreateTransaction,
		arg.ID,
		arg.ChainID,
		arg.ChainType,
		arg.TxHash,
		arg.FromAddress,
		arg.ToAddress,
		arg.Amount,
		arg.Fee,
		arg.BlockNumber,
		arg.BlockHash,
		arg.Status,
		arg.Confirmations,
		arg.Timestamp,
		arg.VerifiedAt,
		arg.ProcessorID,
		arg.Metadata,
	)
	return err
}

const DeleteTransaction = `-- name: DeleteTransaction :execrows
UPDATE transactions SET status = 'deleted'
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteTransactionStmt, DeleteTransaction, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const GetPendingTransactions = `-- name: GetPendingTransactions :many
SELECT id, chain_id, chain_type, tx_hash, from_address, to_address,
       amount, fee, block_number, block_hash, status, confirmations,
       timestamp, verified_at, processor_id, metadata, created_at, updated_at
FROM transactions
WHERE status IN ('pending', 'processing')
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetPendingTransactions(ctx context.Context, limit int32) ([]Transactions, error) {
	rows, err := q.query(ctx, q.getPendingTransactionsStmt, GetPendingTransactions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.ChainType,
			&i.TxHash,
			&i.FromAddress,
			&i.ToAddress,
			&i.Amount,
			&i.Fee,
			&i.BlockNumber,
			&i.BlockHash,
			&i.Status,
			&i.Confirmations,
			&i.Timestamp,
			&i.VerifiedAt,
			&i.ProcessorID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransactionByHash = `-- name: GetTransactionByHash :one
SELECT id, chain_id, chain_type, tx_hash, from_address, to_address,
       amount, fee, block_number, block_hash, status, confirmations,
       timestamp, verified_at, processor_id, metadata, created_at, updated_at
FROM transactions
WHERE chain_id = $1 AND tx_hash = $2
`

type GetTransactionByHashParams struct {
	ChainID string `json:"chain_id"`
	TxHash  string `json:"tx_hash"`
}

func (q *Queries) GetTransactionByHash(ctx context.Context, arg GetTransactionByHashParams) (Transactions, error) {
	row := q.queryRow(ctx, q.getTransactionByHashStmt, GetTransactionByHash, arg.ChainID, arg.TxHash)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ChainType,
		&i.TxHash,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.Fee,
		&i.BlockNumber,
		&i.BlockHash,
		&i.Status,
		&i.Confirmations,
		&i.Timestamp,
		&i.VerifiedAt,
		&i.ProcessorID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTransactionByID = `-- name: GetTransactionByID :one
SELECT id, chain_id, chain_type, tx_hash, from_address, to_address,
       amount, fee, block_number, block_hash, status, confirmations,
       timestamp, verified_at, processor_id, metadata, created_at, updated_at
FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transactions, error) {
	row := q.queryRow(ctx, q.getTransactionByIDStmt, GetTransactionByID, id)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.ChainType,
		&i.TxHash,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.Fee,
		&i.BlockNumber,
		&i.BlockHash,
		&i.Status,
		&i.Confirmations,
		&i.Timestamp,
		&i.VerifiedAt,
		&i.ProcessorID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTransactionStats = `-- name: GetTransactionStats :one
SELECT
    COUNT(*) as total_transactions,
    COUNT(CASE WHEN status = 'verified' THEN 1 END) as verified_count,
    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count,
    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_count,
    COUNT(CASE WHEN status = 'processing' THEN 1 END) as processing_count,
    COALESCE(SUM(CAST(amount AS NUMERIC)), 0) as total_amount,
    COALESCE(AVG(confirmations), 0) as avg_confirmations
FROM transactions
WHERE chain_id = $1
`

type GetTransactionStatsRow struct {
	TotalTransactions int64       `json:"total_transactions"`
	VerifiedCount     int64       `json:"verified_count"`
	PendingCount      int64       `json:"pending_count"`
	FailedCount       int64       `json:"failed_count"`
	ProcessingCount   int64       `json:"processing_count"`
	TotalAmount       interface{} `json:"total_amount"`
	AvgConfirmations  interface{} `json:"avg_confirmations"`
}

func (q *Queries) GetTransactionStats(ctx context.Context, chainID string) (GetTransactionStatsRow, error) {
	row := q.queryRow(ctx, q.getTransactionStatsStmt, GetTransactionStats, chainID)
	var i GetTransactionStatsRow
	err := row.Scan(
		&i.TotalTransactions,
		&i.VerifiedCount,
		&i.PendingCount,
		&i.FailedCount,
		&i.ProcessingCount,
		&i.TotalAmount,
		&i.AvgConfirmations,
	)
	return i, err
}

const GetTransactionsByAddress = `-- name: GetTransactionsByAddress :many
SELECT id, chain_id, chain_type, tx_hash, from_address, to_address,
       amount, fee, block_number, block_hash, status, confirmations,
       timestamp, verified_at, processor_id, metadata, created_at, updated_at
FROM transactions
WHERE chain_id = $1 AND (from_address = $2 OR to_address = $2)
ORDER BY timestamp DESC
LIMIT $3 OFFSET $4
`

type GetTransactionsByAddressParams struct {
	ChainID     string `json:"chain_id"`
	FromAddress string `json:"from_address"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) GetTransactionsByAddress(ctx context.Context, arg GetTransactionsByAddressParams) ([]Transactions, error) {
	rows, err := q.query(ctx, q.getTransactionsByAddressStmt, GetTransactionsByAddress,
		arg.ChainID,
		arg.FromAddress,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.ChainType,
			&i.TxHash,
			&i.FromAddress,
			&i.ToAddress,
			&i.Amount,
			&i.Fee,
			&i.BlockNumber,
			&i.BlockHash,
			&i.Status,
			&i.Confirmations,
			&i.Timestamp,
			&i.VerifiedAt,
			&i.ProcessorID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransactionsByStatus = `-- name: GetTransactionsByStatus :many
SELECT id, chain_id, chain_type, tx_hash, from_address, to_address,
       amount, fee, block_number, block_hash, status, confirmations,
       timestamp, verified_at, processor_id, metadata, created_at, updated_at
FROM transactions
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetTransactionsByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetTransactionsByStatus(ctx context.Context, arg GetTransactionsByStatusParams) ([]Transactions, error) {
	rows, err := q.query(ctx, q.getTransactionsByStatusStmt, GetTransactionsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.ChainType,
			&i.TxHash,
			&i.FromAddress,
			&i.ToAddress,
			&i.Amount,
			&i.Fee,
			&i.BlockNumber,
			&i.BlockHash,
			&i.Status,
			&i.Confirmations,
			&i.Timestamp,
			&i.VerifiedAt,
			&i.ProcessorID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTransaction = `-- name: UpdateTransaction :execrows
UPDATE transactions SET
    chain_id = $2, chain_type = $3, tx_hash = $4,
    from_address = $5, to_address = $6,
    amount = $7, fee = $8, block_number = $9,
    block_hash = $10, status = $11,
    confirmations = $12, timestamp = $13,
    verified_at = $14, processor_id = $15,
    metadata = $16
WHERE id = $1
`

type UpdateTransactionParams struct {
	ID            uuid.UUID             `json:"id"`
	ChainID       string                `json:"chain_id"`
	ChainType     string                `json:"chain_type"`
	TxHash        string                `json:"tx_hash"`
	FromAddress   string                `json:"from_address"`
	ToAddress     string                `json:"to_address"`
	Amount        string                `json:"amount"`
	Fee           sql.NullString        `json:"fee"`
	BlockNumber   sql.NullInt64         `json:"block_number"`
	BlockHash     sql.NullString        `json:"block_hash"`
	Status        string                `json:"status"`
	Confirmations int32                 `json:"confirmations"`
	Timestamp     time.Time             `json:"timestamp"`
	VerifiedAt    sql.NullTime          `json:"verified_at"`
	ProcessorID   sql.NullString        `json:"processor_id"`
	Metadata      pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (int64, error) {
	result, err := q.exec(ctx, q.updateTransactionStmt, UpdateTransaction,
		arg.ID,
		arg.ChainID,
		arg.ChainType,
		arg.TxHash,
		arg.FromAddress,
		arg.ToAddress,
		arg.Amount,
		arg.Fee,
		arg.BlockNumber,
		arg.BlockHash,
		arg.Status,
		arg.Confirmations,
		arg.Timestamp,
		arg.VerifiedAt,
		arg.ProcessorID,
		arg.Metadata,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const UpdateTransactionStatus = `-- name: UpdateTransactionStatus :execrows
UPDATE transactions SET
    status = $2, verified_at = $3,
    metadata = COALESCE($4, metadata)
WHERE id = $1
`

type UpdateTransactionStatusParams struct {
	ID         uuid.UUID             `json:"id"`
	Status     string                `json:"status"`
	VerifiedAt sql.NullTime          `json:"verified_at"`
	Metadata   pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (int64, error) {
	result, err := q.exec(ctx, q.updateTransactionStatusStmt, UpdateTransactionStatus,
		arg.ID,
		arg.Status,
		arg.VerifiedAt,
		arg.Metadata,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
