// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package gen

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type Components string

const (
	ComponentsRealMoney  Components = "real_money"
	ComponentsBonusMoney Components = "bonus_money"
	ComponentsPoints     Components = "points"
)

func (e *Components) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Components(s)
	case string:
		*e = Components(s)
	default:
		return fmt.Errorf("unsupported scan type for Components: %T", src)
	}
	return nil
}

type NullComponents struct {
	Components Components `json:"components"`
	Valid      bool       `json:"valid"` // Valid is true if Components is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullComponents) Scan(value interface{}) error {
	if value == nil {
		ns.Components, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Components.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullComponents) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Components), nil
}

type ConversionType string

const (
	ConversionTypeDeposit    ConversionType = "deposit"
	ConversionTypeWithdrawal ConversionType = "withdrawal"
	ConversionTypeExchange   ConversionType = "exchange"
)

func (e *ConversionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConversionType(s)
	case string:
		*e = ConversionType(s)
	default:
		return fmt.Errorf("unsupported scan type for ConversionType: %T", src)
	}
	return nil
}

type NullConversionType struct {
	ConversionType ConversionType `json:"conversion_type"`
	Valid          bool           `json:"valid"` // Valid is true if ConversionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConversionType) Scan(value interface{}) error {
	if value == nil {
		ns.ConversionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConversionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConversionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConversionType), nil
}

type CurrencyType string

const (
	CurrencyTypeFiat   CurrencyType = "fiat"
	CurrencyTypeCrypto CurrencyType = "crypto"
)

func (e *CurrencyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CurrencyType(s)
	case string:
		*e = CurrencyType(s)
	default:
		return fmt.Errorf("unsupported scan type for CurrencyType: %T", src)
	}
	return nil
}

type NullCurrencyType struct {
	CurrencyType CurrencyType `json:"currency_type"`
	Valid        bool         `json:"valid"` // Valid is true if CurrencyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrencyType) Scan(value interface{}) error {
	if value == nil {
		ns.CurrencyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CurrencyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrencyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CurrencyType), nil
}

type DepositSessionStatus string

const (
	DepositSessionStatusPending    DepositSessionStatus = "pending"
	DepositSessionStatusProcessing DepositSessionStatus = "processing"
	DepositSessionStatusCompleted  DepositSessionStatus = "completed"
	DepositSessionStatusFailed     DepositSessionStatus = "failed"
	DepositSessionStatusCancelled  DepositSessionStatus = "cancelled"
	DepositSessionStatusExpired    DepositSessionStatus = "expired"
)

func (e *DepositSessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DepositSessionStatus(s)
	case string:
		*e = DepositSessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DepositSessionStatus: %T", src)
	}
	return nil
}

type NullDepositSessionStatus struct {
	DepositSessionStatus DepositSessionStatus `json:"deposit_session_status"`
	Valid                bool                 `json:"valid"` // Valid is true if DepositSessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDepositSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DepositSessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DepositSessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDepositSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DepositSessionStatus), nil
}

type Processortype string

const (
	ProcessortypeInternal Processortype = "internal"
	ProcessortypePdm      Processortype = "pdm"
)

func (e *Processortype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Processortype(s)
	case string:
		*e = Processortype(s)
	default:
		return fmt.Errorf("unsupported scan type for Processortype: %T", src)
	}
	return nil
}

type NullProcessortype struct {
	Processortype Processortype `json:"processortype"`
	Valid         bool          `json:"valid"` // Valid is true if Processortype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProcessortype) Scan(value interface{}) error {
	if value == nil {
		ns.Processortype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Processortype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProcessortype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Processortype), nil
}

type WithdrawalStatus string

const (
	WithdrawalStatusPending             WithdrawalStatus = "pending"
	WithdrawalStatusProcessing          WithdrawalStatus = "processing"
	WithdrawalStatusCompleted           WithdrawalStatus = "completed"
	WithdrawalStatusFailed              WithdrawalStatus = "failed"
	WithdrawalStatusCancelled           WithdrawalStatus = "cancelled"
	WithdrawalStatusAwaitingAdminReview WithdrawalStatus = "awaiting_admin_review"
)

func (e *WithdrawalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WithdrawalStatus(s)
	case string:
		*e = WithdrawalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for WithdrawalStatus: %T", src)
	}
	return nil
}

type NullWithdrawalStatus struct {
	WithdrawalStatus WithdrawalStatus `json:"withdrawal_status"`
	Valid            bool             `json:"valid"` // Valid is true if WithdrawalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWithdrawalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.WithdrawalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WithdrawalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWithdrawalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WithdrawalStatus), nil
}

type AdminFundMovements struct {
	ID             uuid.UUID             `json:"id"`
	AdminID        uuid.UUID             `json:"admin_id"`
	FromAddress    string                `json:"from_address"`
	ToAddress      string                `json:"to_address"`
	ChainID        string                `json:"chain_id"`
	Network        string                `json:"network"`
	CryptoCurrency string                `json:"crypto_currency"`
	Amount         string                `json:"amount"`
	TxHash         sql.NullString        `json:"tx_hash"`
	Status         string                `json:"status"`
	MovementType   string                `json:"movement_type"`
	Metadata       pqtype.NullRawMessage `json:"metadata"`
	CreatedAt      sql.NullTime          `json:"created_at"`
	UpdatedAt      sql.NullTime          `json:"updated_at"`
}

type AuditLogs struct {
	ID         uuid.UUID             `json:"id"`
	Action     string                `json:"action"`
	EntityType string                `json:"entity_type"`
	EntityID   string                `json:"entity_id"`
	AdminID    uuid.NullUUID         `json:"admin_id"`
	OldValues  pqtype.NullRawMessage `json:"old_values"`
	NewValues  pqtype.NullRawMessage `json:"new_values"`
	IpAddress  pqtype.Inet           `json:"ip_address"`
	UserAgent  sql.NullString        `json:"user_agent"`
	CreatedAt  sql.NullTime          `json:"created_at"`
}

type BalanceLogs struct {
	ID                 uuid.UUID      `json:"id"`
	UserID             uuid.UUID      `json:"user_id"`
	Component          Components     `json:"component"`
	CurrencyCode       string         `json:"currency_code"`
	ChangeCents        int64          `json:"change_cents"`
	ChangeUnits        string         `json:"change_units"`
	OperationalGroupID uuid.NullUUID  `json:"operational_group_id"`
	OperationalTypeID  uuid.NullUUID  `json:"operational_type_id"`
	Description        sql.NullString `json:"description"`
	Timestamp          sql.NullTime   `json:"timestamp"`
	BalanceAfterCents  sql.NullInt64  `json:"balance_after_cents"`
	BalanceAfterUnits  sql.NullString `json:"balance_after_units"`
	TransactionID      sql.NullString `json:"transaction_id"`
	Status             sql.NullString `json:"status"`
}

type Balances struct {
	ID            uuid.UUID      `json:"id"`
	UserID        uuid.UUID      `json:"user_id"`
	CurrencyCode  string         `json:"currency_code"`
	AmountCents   sql.NullInt64  `json:"amount_cents"`
	AmountUnits   sql.NullString `json:"amount_units"`
	ReservedCents sql.NullInt64  `json:"reserved_cents"`
	ReservedUnits sql.NullString `json:"reserved_units"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
}

type ConversionRemainders struct {
	ID              uuid.UUID      `json:"id"`
	TransactionID   uuid.UUID      `json:"transaction_id"`
	OriginalAmount  string         `json:"original_amount"`
	ConvertedAmount int64          `json:"converted_amount"`
	RemainderAmount string         `json:"remainder_amount"`
	CurrencyCode    string         `json:"currency_code"`
	ConversionType  ConversionType `json:"conversion_type"`
	CreatedAt       sql.NullTime   `json:"created_at"`
}

type CurrencyConfig struct {
	CurrencyCode     string         `json:"currency_code"`
	CurrencyName     string         `json:"currency_name"`
	CurrencyType     CurrencyType   `json:"currency_type"`
	DecimalPlaces    int32          `json:"decimal_places"`
	SmallestUnitName sql.NullString `json:"smallest_unit_name"`
	IsActive         sql.NullBool   `json:"is_active"`
	CreatedAt        sql.NullTime   `json:"created_at"`
}

type DepositSessions struct {
	ID             uuid.UUID             `json:"id"`
	SessionID      string                `json:"session_id"`
	UserID         uuid.UUID             `json:"user_id"`
	ChainID        string                `json:"chain_id"`
	Network        string                `json:"network"`
	WalletAddress  sql.NullString        `json:"wallet_address"`
	Amount         string                `json:"amount"`
	CryptoCurrency string                `json:"crypto_currency"`
	Status         DepositSessionStatus  `json:"status"`
	QrCodeData     sql.NullString        `json:"qr_code_data"`
	PaymentLink    sql.NullString        `json:"payment_link"`
	Metadata       pqtype.NullRawMessage `json:"metadata"`
	ErrorMessage   sql.NullString        `json:"error_message"`
	CreatedAt      sql.NullTime          `json:"created_at"`
	UpdatedAt      sql.NullTime          `json:"updated_at"`
}

type ExchangeRates struct {
	ID           uuid.UUID    `json:"id"`
	FromCurrency string       `json:"from_currency"`
	ToCurrency   string       `json:"to_currency"`
	Rate         string       `json:"rate"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
}

type LoginAttempts struct {
	ID        uuid.UUID      `json:"id"`
	UserID    uuid.NullUUID  `json:"user_id"`
	IpAddress pqtype.Inet    `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
	Success   bool           `json:"success"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

type ManualFunds struct {
	ID            uuid.UUID    `json:"id"`
	UserID        uuid.UUID    `json:"user_id"`
	AdminID       uuid.UUID    `json:"admin_id"`
	TransactionID string       `json:"transaction_id"`
	Type          string       `json:"type"`
	AmountCents   int64        `json:"amount_cents"`
	CurrencyCode  string       `json:"currency_code"`
	Note          string       `json:"note"`
	Reason        string       `json:"reason"`
	CreatedAt     sql.NullTime `json:"created_at"`
}

type OperationalGroups struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

type OperationalTypes struct {
	ID          uuid.UUID      `json:"id"`
	GroupID     uuid.UUID      `json:"group_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

type ServiceApiKeys struct {
	ID              uuid.UUID    `json:"id"`
	IssuerService   string       `json:"issuer_service"`
	ReceiverService string       `json:"receiver_service"`
	Key             string       `json:"key"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

type SportBets struct {
	ID                uuid.UUID       `json:"id"`
	TransactionID     string          `json:"transaction_id"`
	BetAmountCents    int64           `json:"bet_amount_cents"`
	BetReferenceNum   string          `json:"bet_reference_num"`
	GameReference     string          `json:"game_reference"`
	BetMode           string          `json:"bet_mode"`
	Description       sql.NullString  `json:"description"`
	UserID            uuid.UUID       `json:"user_id"`
	FrontendType      sql.NullString  `json:"frontend_type"`
	Status            sql.NullString  `json:"status"`
	SportIds          sql.NullString  `json:"sport_ids"`
	SiteID            string          `json:"site_id"`
	ClientIp          pqtype.Inet     `json:"client_ip"`
	AffiliateUserID   sql.NullString  `json:"affiliate_user_id"`
	Autorecharge      sql.NullString  `json:"autorecharge"`
	BetDetails        json.RawMessage `json:"bet_details"`
	CurrencyCode      string          `json:"currency_code"`
	PotentialWinCents sql.NullInt64   `json:"potential_win_cents"`
	ActualWinCents    sql.NullInt64   `json:"actual_win_cents"`
	Odds              sql.NullString  `json:"odds"`
	PlacedAt          sql.NullTime    `json:"placed_at"`
	SettledAt         sql.NullTime    `json:"settled_at"`
	CreatedAt         sql.NullTime    `json:"created_at"`
	UpdatedAt         sql.NullTime    `json:"updated_at"`
}

type SupportedChains struct {
	ID               uuid.UUID     `json:"id"`
	ChainID          string        `json:"chain_id"`
	Name             string        `json:"name"`
	Networks         []string      `json:"networks"`
	CryptoCurrencies []string      `json:"crypto_currencies"`
	Processor        Processortype `json:"processor"`
	IsTestnet        bool          `json:"is_testnet"`
	Status           string        `json:"status"`
	CreatedAt        sql.NullTime  `json:"created_at"`
	UpdatedAt        sql.NullTime  `json:"updated_at"`
}

type SystemConfig struct {
	ID          uuid.UUID       `json:"id"`
	ConfigKey   string          `json:"config_key"`
	ConfigValue json.RawMessage `json:"config_value"`
	Description sql.NullString  `json:"description"`
	UpdatedBy   uuid.NullUUID   `json:"updated_by"`
	CreatedAt   sql.NullTime    `json:"created_at"`
	UpdatedAt   sql.NullTime    `json:"updated_at"`
}

type Transactions struct {
	ID               uuid.UUID             `json:"id"`
	DepositSessionID sql.NullString        `json:"deposit_session_id"`
	WithdrawalID     sql.NullString        `json:"withdrawal_id"`
	ChainID          string                `json:"chain_id"`
	Network          string                `json:"network"`
	CryptoCurrency   string                `json:"crypto_currency"`
	TxHash           string                `json:"tx_hash"`
	FromAddress      string                `json:"from_address"`
	ToAddress        string                `json:"to_address"`
	Amount           string                `json:"amount"`
	UsdAmountCents   sql.NullInt64         `json:"usd_amount_cents"`
	ExchangeRate     sql.NullString        `json:"exchange_rate"`
	Fee              sql.NullString        `json:"fee"`
	BlockNumber      sql.NullInt64         `json:"block_number"`
	BlockHash        sql.NullString        `json:"block_hash"`
	Status           string                `json:"status"`
	Confirmations    int32                 `json:"confirmations"`
	Timestamp        sql.NullTime          `json:"timestamp"`
	VerifiedAt       sql.NullTime          `json:"verified_at"`
	Processor        Processortype         `json:"processor"`
	TransactionType  string                `json:"transaction_type"`
	Metadata         pqtype.NullRawMessage `json:"metadata"`
	CreatedAt        sql.NullTime          `json:"created_at"`
	UpdatedAt        sql.NullTime          `json:"updated_at"`
}

type UserSessions struct {
	ID                    uuid.UUID      `json:"id"`
	UserID                uuid.NullUUID  `json:"user_id"`
	Token                 string         `json:"token"`
	ExpiresAt             time.Time      `json:"expires_at"`
	IpAddress             pqtype.Inet    `json:"ip_address"`
	UserAgent             sql.NullString `json:"user_agent"`
	CreatedAt             sql.NullTime   `json:"created_at"`
	RefreshToken          sql.NullString `json:"refresh_token"`
	RefreshTokenExpiresAt sql.NullTime   `json:"refresh_token_expires_at"`
}

type Users struct {
	ID              uuid.UUID      `json:"id"`
	Username        string         `json:"username"`
	FirstName       sql.NullString `json:"first_name"`
	LastName        sql.NullString `json:"last_name"`
	PhoneNumber     string         `json:"phone_number"`
	Password        string         `json:"password"`
	Email           sql.NullString `json:"email"`
	DateOfBirth     sql.NullString `json:"date_of_birth"`
	Profile         sql.NullString `json:"profile"`
	DefaultCurrency sql.NullString `json:"default_currency"`
	Source          sql.NullString `json:"source"`
	ReferralCode    sql.NullString `json:"referral_code"`
	ReferralType    sql.NullString `json:"referral_type"`
	ReferredByCode  sql.NullString `json:"referred_by_code"`
	UserType        sql.NullString `json:"user_type"`
	StreetAddress   sql.NullString `json:"street_address"`
	Country         sql.NullString `json:"country"`
	State           sql.NullString `json:"state"`
	City            sql.NullString `json:"city"`
	PostalCode      sql.NullString `json:"postal_code"`
	KycStatus       sql.NullString `json:"kyc_status"`
	CreatedBy       uuid.NullUUID  `json:"created_by"`
	Status          sql.NullString `json:"status"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

type Wallets struct {
	ID             uuid.UUID    `json:"id"`
	SessionID      string       `json:"session_id"`
	UserID         uuid.UUID    `json:"user_id"`
	ChainID        string       `json:"chain_id"`
	CryptoCurrency string       `json:"crypto_currency"`
	Network        string       `json:"network"`
	Amount         string       `json:"amount"`
	Address        string       `json:"address"`
	VaultKeyPath   string       `json:"vault_key_path"`
	CreatedAt      sql.NullTime `json:"created_at"`
	LastUsed       sql.NullTime `json:"last_used"`
}

type Withdrawals struct {
	ID                    uuid.UUID             `json:"id"`
	UserID                uuid.UUID             `json:"user_id"`
	AdminID               uuid.NullUUID         `json:"admin_id"`
	WithdrawalID          string                `json:"withdrawal_id"`
	ChainID               string                `json:"chain_id"`
	Network               string                `json:"network"`
	CryptoCurrency        string                `json:"crypto_currency"`
	UsdAmountCents        int64                 `json:"usd_amount_cents"`
	CryptoAmount          string                `json:"crypto_amount"`
	ExchangeRate          string                `json:"exchange_rate"`
	FeeCents              int64                 `json:"fee_cents"`
	ToAddress             string                `json:"to_address"`
	TxHash                sql.NullString        `json:"tx_hash"`
	Status                WithdrawalStatus      `json:"status"`
	RequiresAdminReview   bool                  `json:"requires_admin_review"`
	AdminReviewDeadline   sql.NullTime          `json:"admin_review_deadline"`
	ProcessedBySystem     sql.NullBool          `json:"processed_by_system"`
	SourceWalletAddress   string                `json:"source_wallet_address"`
	AmountReservedCents   int64                 `json:"amount_reserved_cents"`
	ReservationReleased   sql.NullBool          `json:"reservation_released"`
	ReservationReleasedAt sql.NullTime          `json:"reservation_released_at"`
	Metadata              pqtype.NullRawMessage `json:"metadata"`
	ErrorMessage          sql.NullString        `json:"error_message"`
	CreatedAt             sql.NullTime          `json:"created_at"`
	UpdatedAt             sql.NullTime          `json:"updated_at"`
}
